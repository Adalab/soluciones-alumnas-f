{"version":3,"sources":["components/PeopleList.js","components/Filter.js","App.js","services/PeopleService.js","serviceWorker.js","index.js"],"names":["PeopleList","props","react_default","a","createElement","className","peopleData","filter","elem","selectedCities","includes","location","city","length","selectedGenders","gender","map","person","ind","key","concat","name","first","last","style","backgroundImage","picture","thumbnail","height","width","dob","age","Filter","filteredGenders","index","type","id","value","checked","onChange","handleCheckboxGender","htmlFor","filteredCities","handleCheckboxCity","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","filters","cities","genders","people","isLoading","fetchNewPeople","bind","assertThisInitialized","_this2","fetch","then","response","json","data","citiesList","i","results","push","item","indexOf","genderList","setState","prevState","objectSpread","event","_this3","currentTarget","splice","_this4","components_PeopleList","filtersData","components_Filter","React","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2QAoCeA,MAlCf,SAAoBC,GAElB,OACEC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UACXJ,EAAMK,WACNC,OAAQ,SAAAC,GACP,OAAOP,EAAMQ,eAAeC,SAASF,EAAKG,SAASC,OAAyC,IAAhCX,EAAMQ,eAAeI,SAElFN,OAAQ,SAAAC,GACP,OAAOP,EAAMa,gBAAgBJ,SAASF,EAAKO,SAA4C,IAAjCd,EAAMa,gBAAgBD,SAE7EG,IAAI,SAACC,EAAQC,GACZ,OACEhB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAec,IAAKD,GAChChB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,GAAAe,OAAiCH,EAAOI,KAAKC,MAA7C,KAAAF,OAAsDH,EAAOI,KAAKE,OAClErB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbmB,MAAO,CACLC,gBAAe,OAAAL,OAASH,EAAOS,QAAQC,UAAxB,KACfC,OAAQ,OACRC,MAAO,UAGX3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,SAAIa,EAAON,SAASC,MACpBV,EAAAC,EAAAC,cAAA,SAAIa,EAAOa,IAAIC,WCadC,MArCf,SAAgB/B,GACd,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBACXJ,EAAMgC,gBAAgBjB,IAAI,SAACD,EAAQmB,GAAT,OACzBhC,EAAAC,EAAAC,cAAA,MAAIe,IAAKe,GACPhC,EAAAC,EAAAC,cAAA,SACE+B,KAAK,WACLC,GAAIrB,EACJM,KAAK,SACLgB,MAAOtB,EACPuB,QAASrC,EAAMa,gBAAgBJ,SAASK,GACxCwB,SAAUtC,EAAMuC,uBAElBtC,EAAAC,EAAAC,cAAA,SAAOqC,QAAS1B,GAASA,OAI/Bb,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBACXJ,EAAMyC,eAAe1B,IAAI,SAACJ,EAAMsB,GAAP,OACxBhC,EAAAC,EAAAC,cAAA,MAAIe,IAAKe,GACPhC,EAAAC,EAAAC,cAAA,SACE+B,KAAK,WACLC,GAAIxB,EACJS,KAAK,SACLgB,MAAOzB,EACP0B,QAASrC,EAAMQ,eAAeC,SAASE,GACvC2B,SAAUtC,EAAM0C,qBAElBzC,EAAAC,EAAAC,cAAA,SAAOqC,QAAS7B,GAAOA,SC4FpBgC,qBApHb,SAAAA,EAAY3C,GAAO,IAAA4C,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAM/C,KACDmD,MAAQ,CACXC,QAAS,CACPC,OAAQ,GACR7C,eAAgB,GAChB8C,QAAS,GACTzC,gBAAiB,IAEnB0C,OAAQ,GACRC,WAAW,GAEbZ,EAAKa,eAAeb,EAAKa,eAAeC,KAApBb,OAAAc,EAAA,EAAAd,CAAAD,IACpBA,EAAKF,mBAAqBE,EAAKF,mBAAmBgB,KAAxBb,OAAAc,EAAA,EAAAd,CAAAD,IAC1BA,EAAKL,qBAAuBK,EAAKL,qBAAqBmB,KAA1Bb,OAAAc,EAAA,EAAAd,CAAAD,IAC5BA,EAAKa,iBAfYb,gFAkBF,IAAAgB,EAAAb,KCtBOc,MAFT,yCAEyBC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SDwBlDF,KAAK,SAAAG,GAEjB,IADA,IAAIC,EAAW,GACNC,EAAE,EAAGA,EAAEF,EAAKG,QAAQxD,OAAOuD,IAClCD,EAAWG,KAAKJ,EAAKG,QAAQD,GAAGzD,SAASC,MAM3C,IAHA,IAAM8B,EAAiByB,EAAW5D,OAAO,SAACgE,EAAMrC,GAAP,OAAiBiC,EAAWK,QAAQD,KAAUrC,IAEnFuC,EAAa,GACRL,EAAE,EAAGA,EAAEF,EAAKG,QAAQxD,OAAOuD,IAClCK,EAAWH,KAAKJ,EAAKG,QAAQD,GAAGrD,QAGlC,IAAMkB,EAAkBwC,EAAWlE,OAAO,SAACgE,EAAMrC,GAAP,OAAiBuC,EAAWD,QAAQD,KAAUrC,IAExF2B,EAAKa,SAAS,SAAAC,GACZ,MAAO,CACLnB,OAAQU,EAAKG,QACbhB,QAAQP,OAAA8B,EAAA,EAAA9B,CAAA,GACH6B,EAAUtB,QADR,CAELC,OAAQZ,EACRa,QAAStB,oDAOA4C,GAAO,IAAAC,EAAA9B,KAClBX,EAAQwC,EAAME,cAAc1C,MAElCW,KAAK0B,SAAS,SAACC,EAAWzC,GAExB,GAAI4C,EAAK1B,MAAMC,QAAQ5C,eAAeC,SAAS2B,GAAQ,CACrD,IAAMnB,EAAM4D,EAAK1B,MAAMC,QAAQ5C,eAAe+D,QAAQnC,GACtDyC,EAAK1B,MAAMC,QAAQ5C,eAAeuE,OAAO9D,EAAK,QAE9C4D,EAAK1B,MAAMC,QAAQ5C,eAAe6D,KAAKjC,GAGzC,MAAO,CACLgB,QAAQP,OAAA8B,EAAA,EAAA9B,CAAA,GACH6B,EAAUtB,QADR,CAEL5C,eAAgBqE,EAAK1B,MAAMC,QAAQ5C,iEAMtBoE,GAAO,IAAAI,EAAAjC,KACpBX,EAAQwC,EAAME,cAAc1C,MAElCW,KAAK0B,SAAS,SAACC,EAAWzC,GAExB,GAAI+C,EAAK7B,MAAMC,QAAQvC,gBAAgBJ,SAAS2B,GAAQ,CACtD,IAAMnB,EAAM+D,EAAK7B,MAAMC,QAAQvC,gBAAgB0D,QAAQnC,GACvD4C,EAAK7B,MAAMC,QAAQvC,gBAAgBkE,OAAO9D,EAAK,QAE/C+D,EAAK7B,MAAMC,QAAQvC,gBAAgBwD,KAAKjC,GAG1C,MAAO,CACLgB,QAAQP,OAAA8B,EAAA,EAAA9B,CAAA,GACH6B,EAAUtB,QADR,CAELvC,gBAAiBmE,EAAK7B,MAAMC,QAAQvC,sDAQ1C,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEbH,EAAAC,EAAAC,cAAC8E,EAAD,CACE5E,WAAY0C,KAAKI,MAAMI,OACvB2B,YAAanC,KAAKI,MAAMC,QACxB5C,eAAgBuC,KAAKI,MAAMC,QAAQ5C,eACnCK,gBAAiBkC,KAAKI,MAAMC,QAAQvC,kBAGtCZ,EAAAC,EAAAC,cAACgF,EAAD,CACE1C,eAAgBM,KAAKI,MAAMC,QAAQC,OACnCrB,gBAAiBe,KAAKI,MAAMC,QAAQE,QACpCZ,mBAAoBK,KAAKL,mBACzBlC,eAAgBuC,KAAKI,MAAMC,QAAQ5C,eACnCK,gBAAiBkC,KAAKI,MAAMC,QAAQvC,gBACpC0B,qBAAsBQ,KAAKR,+BA7GnB6C,IAAMC,YEMJC,QACW,cAA7BC,OAAO7E,SAAS8E,UAEe,UAA7BD,OAAO7E,SAAS8E,UAEhBD,OAAO7E,SAAS8E,SAASC,MACvB,2DCZNC,IAASC,OAAO1F,EAAAC,EAAAC,cAACyF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,KAAK,SAAAoC,GACjCA,EAAaC","file":"static/js/main.e31c64c0.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction PeopleList(props) {\n\n  return (\n    <ul className=\"people\">\n      {props.peopleData\n      .filter( elem => {\n        return props.selectedCities.includes(elem.location.city) || props.selectedCities.length === 0;\n      })\n      .filter( elem => {\n        return props.selectedGenders.includes(elem.gender) || props.selectedGenders.length === 0;\n      })\n      .map((person, ind) => {\n        return (\n          <li className=\"people__card\" key={ind}>\n            <h2 className=\"people__name\">{`${person.name.first} ${person.name.last}`}</h2>\n            <div className=\"people__photo\"\n              style={{\n                backgroundImage: `url(${person.picture.thumbnail})`,\n                height: \"48px\",\n                width: \"48px\"\n              }}\n            />\n            <div className=\"people__datum\">\n              <p>{person.location.city}</p>\n              <p>{person.dob.age}</p>\n            </div>\n            \n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nexport default PeopleList;\n","import React from \"react\";\n\nfunction Filter(props) {\n  return (\n    <div>\n      <ul className=\"first__filter\">\n        {props.filteredGenders.map((gender, index) => (\n          <li key={index}>\n            <input\n              type=\"checkbox\"\n              id={gender}\n              name=\"gender\"\n              value={gender}\n              checked={props.selectedGenders.includes(gender)}\n              onChange={props.handleCheckboxGender}\n            />\n            <label htmlFor={gender}>{gender}</label>\n          </li>\n        ))}\n      </ul>\n      <ul className=\"second__filter\">\n        {props.filteredCities.map((city, index) => (\n          <li key={index}>\n            <input\n              type=\"checkbox\"\n              id={city}\n              name=\"cities\"\n              value={city}\n              checked={props.selectedCities.includes(city)}\n              onChange={props.handleCheckboxCity}\n            />\n            <label htmlFor={city}>{city}</label>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default Filter;\n","import React from \"react\";\nimport { fetchPeople } from \"./services/PeopleService\";\nimport PeopleList from \"./components/PeopleList\";\nimport Filter from \"./components/Filter\";\nimport \"./App.scss\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filters: {\n        cities: [],\n        selectedCities: [],\n        genders: [],\n        selectedGenders: []\n      },\n      people: [],\n      isLoading: true\n    };\n    this.fetchNewPeople=this.fetchNewPeople.bind(this);\n    this.handleCheckboxCity = this.handleCheckboxCity.bind(this);\n    this.handleCheckboxGender = this.handleCheckboxGender.bind(this);\n    this.fetchNewPeople();\n  }\n\n  fetchNewPeople() {\n\n    fetchPeople().then(data => {\n      let citiesList=[];\n      for (let i=0; i<data.results.length;i++){\n        citiesList.push(data.results[i].location.city)\n      }\n\n      const filteredCities = citiesList.filter((item, index) => citiesList.indexOf(item) === index)\n\n      let genderList = [];\n      for (let i=0; i<data.results.length;i++){\n        genderList.push(data.results[i].gender)\n      }\n\n      const filteredGenders = genderList.filter((item, index) => genderList.indexOf(item) === index); \n\n      this.setState(prevState => {\n        return {\n          people: data.results,\n          filters: {\n            ...prevState.filters,\n            cities: filteredCities,\n            genders: filteredGenders,\n          }\n        }\n      });\n    });\n  }\n\n  handleCheckboxCity(event) {\n    const value = event.currentTarget.value;\n\n    this.setState((prevState, index) => {\n\n      if (this.state.filters.selectedCities.includes(value)) {\n        const ind = this.state.filters.selectedCities.indexOf(value);\n        this.state.filters.selectedCities.splice(ind, 1);\n      } else {\n        this.state.filters.selectedCities.push(value);\n      }\n\n      return {\n        filters: {\n          ...prevState.filters,\n          selectedCities: this.state.filters.selectedCities,\n        }\n      }\n    })\n  }\n\n  handleCheckboxGender(event) {\n    const value = event.currentTarget.value;\n\n    this.setState((prevState, index) => {\n\n      if (this.state.filters.selectedGenders.includes(value)) {\n        const ind = this.state.filters.selectedGenders.indexOf(value);\n        this.state.filters.selectedGenders.splice(ind, 1);\n      } else {\n        this.state.filters.selectedGenders.push(value);\n      }\n\n      return {\n        filters: {\n          ...prevState.filters,\n          selectedGenders: this.state.filters.selectedGenders,\n        }\n      }\n    })\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n\n        <PeopleList \n          peopleData={this.state.people} \n          filtersData={this.state.filters}\n          selectedCities={this.state.filters.selectedCities}\n          selectedGenders={this.state.filters.selectedGenders}\n        />\n\n        <Filter \n          filteredCities={this.state.filters.cities} \n          filteredGenders={this.state.filters.genders}\n          handleCheckboxCity={this.handleCheckboxCity}\n          selectedCities={this.state.filters.selectedCities}\n          selectedGenders={this.state.filters.selectedGenders}\n          handleCheckboxGender={this.handleCheckboxGender}\n        />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","\nconst ENDPOINT = 'https://randomuser.me/api/?results=50';\n\nconst fetchPeople = () => fetch(ENDPOINT).then(response => response.json())\n\nexport { fetchPeople };","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}